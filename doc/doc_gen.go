// Code generated by go-bindata.
// sources:
// yaml/corp.yaml
// yaml/mp.yaml
// DO NOT EDIT!

package doc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _corpYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x53\xc1\x6e\x13\x31\x10\xbd\xe7\x2b\xe6\x03\x88\x12\x71\xdc\x33\x37\x0e\x7c\x42\x64\xad\x27\x8b\xd1\x7a\xed\x8e\xed\x4a\x39\x56\xa2\xa5\x2a\x85\xe6\x80\x0a\x54\x02\x52\x89\x73\x2a\xa4\xaa\x0d\x4a\xc4\xd7\xac\xb3\xe9\xa9\xbf\x80\xb6\xde\x0d\xdb\x28\x0b\x1c\x90\xb8\xf4\x38\x33\xcf\xf3\x66\xfc\xde\x38\x9d\x2a\xc6\x07\x56\xea\x81\x44\x2e\x58\xd4\x01\x30\x4e\x4a\x46\xa3\x08\xf2\xd9\x51\xbe\x98\xe4\xb3\xcb\xe5\xfb\xab\xe2\x72\xb2\xfc\x34\xee\x00\x58\x96\x98\x12\x05\xd0\x85\x7c\xb1\x97\xcf\xce\xfc\xc9\x75\x37\x94\x8b\xe9\x79\x31\x3e\xe8\x00\x68\x46\x4c\xa2\x45\x5a\x43\x33\x26\x31\x82\xa1\x48\xf1\x2e\x01\x20\xb2\x08\x86\x8a\xe4\x13\x66\x59\x95\xe2\x68\x62\x12\xda\x0a\x95\x45\xe0\x7f\xec\x07\xfe\xe2\xec\xe5\xf2\xf4\x55\x3e\xbf\xaa\x50\x84\x3b\x4e\x10\xf2\x08\x2c\xb9\xba\x9b\x1d\xe9\x66\xfb\x9a\xaf\x4c\xff\x25\x5f\xf1\x6d\xee\x3f\xbf\x7e\x24\x24\x4b\xb0\xb7\xab\x44\x8c\xbd\x5d\xc1\x51\xf5\x1a\x33\x07\x16\x63\x49\x64\x49\xdb\x34\xb1\xca\x8c\x93\xb8\x5e\x5c\xba\xd4\x0a\xcd\xc8\xf6\x4a\xf6\x2e\x0f\xf4\x84\x46\xab\xcc\xd4\xb0\xc7\xfd\x7e\x54\x35\x34\xf1\x73\x94\xac\x8e\x00\x34\x29\x8d\x64\x45\x0d\xad\x69\x8d\x4b\x6d\x33\xb3\xb1\xce\xcd\xbb\x8f\xab\x8b\x8b\x62\xb2\x77\xbb\x38\xbe\x99\x7f\x58\x4d\xbf\xf6\x6f\x17\xc7\xcb\xc3\xb1\x3f\xfa\x72\xef\x55\xd8\x49\x64\x16\x13\xa4\x46\x45\xa2\x31\x2c\xc1\x3f\x52\xf8\x83\x7d\x3f\xfd\xbe\x66\x79\xf6\x74\x4b\xf7\xea\xc7\x12\xb4\x2d\x4e\x5b\xbd\xbd\xf6\x27\xa7\xff\xc6\x69\xa5\xd0\x3b\x0e\x69\x54\x0d\x12\x9c\x70\xc7\x39\x10\x7c\xbb\x92\x9a\x14\x77\xf1\x2f\xd1\x82\x0b\x74\xa5\x72\x1d\xbf\xd0\x9b\x31\xde\x4f\x24\x62\xf8\x5b\x6d\x1b\x2e\xad\x0e\x2f\x66\xc4\x07\xa9\x4a\xd4\x96\xc3\xf3\x6f\xce\xfd\xe1\xac\x2c\xb6\x7e\x46\x80\xfc\xf7\x83\x7b\xf0\x7c\x9b\xe7\x7f\x06\x00\x00\xff\xff\xc9\x8e\x1f\x7f\x60\x05\x00\x00")

func corpYamlBytes() ([]byte, error) {
	return bindataRead(
		_corpYaml,
		"corp.yaml",
	)
}

func corpYaml() (*asset, error) {
	bytes, err := corpYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "corp.yaml", size: 1376, mode: os.FileMode(436), modTime: time.Unix(1497347578, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mpYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x56\xcd\x4e\x1b\x3d\x14\xdd\xe7\x29\xfc\x00\x1f\x0a\x7c\xcb\x59\x77\xd7\x45\x1f\x21\x72\x3c\x37\x13\xd3\xf1\xd8\xd8\x1e\xaa\x2c\x91\x08\xb4\xfc\x94\x20\xb5\x94\x1f\x95\xa6\x55\x55\x76\x81\x4a\x94\x42\x83\xe8\xcb\x64\x7e\xb2\xe2\x15\xaa\xc4\x21\x64\xc2\x4c\x08\x50\x89\x4a\x64\xa4\x59\x5c\xfb\xce\x3d\xd7\x67\xce\xb1\xed\x72\x87\x7a\x56\x0e\x21\x1b\x14\x91\x54\x68\xca\x3d\x0b\x85\x1b\x1b\xf1\xef\xa3\x1c\x42\xca\x67\x0c\xcb\x8a\x85\xc2\xcd\xed\xf8\xdb\x42\x0e\x21\x8d\x1d\xd5\xc9\x47\x68\x0a\x85\x3f\x56\xe3\xc3\xf7\x39\x84\x04\x96\x98\x81\x06\xd9\x9f\xa2\x9e\x85\xe6\x7c\x90\x95\x6e\x8c\x90\x87\x19\x58\x08\x17\x7b\xa1\xae\x08\xb0\x90\xd2\x92\x7a\x4e\xef\x8b\x44\x03\x33\x33\x33\xbd\xcc\x4e\x21\x81\x75\x39\x51\x87\xd8\xe9\x75\x24\x28\xc1\x3d\x05\xbd\x36\xfe\x9f\x9e\xb6\x7a\x89\x8a\x94\x81\xe1\xab\x08\x21\x21\xb9\x00\xa9\xe9\x55\xaa\x79\x30\xc6\x83\xe1\x10\x2b\x03\x41\x22\xe9\xc6\x62\xcc\x53\x2c\x16\x47\x14\x2b\x61\x65\x77\xdf\x94\x52\x58\x4a\x5c\x49\x8c\x53\x0d\x4c\x25\xab\x8d\xd9\x5c\x66\x7b\x84\x90\x7b\xb6\xc7\x8b\xb3\x40\x74\x62\x22\x9d\xce\x54\x4a\xef\xd0\x79\x66\xef\x28\x8d\xde\xfb\x17\x56\x65\xfe\xaa\x30\x27\x09\xb7\xc1\x4a\x88\xbe\x7e\x16\xae\x37\x34\x25\x2f\x41\xc7\x6f\x7f\x06\x1b\x5b\x41\x63\xbf\xbd\x53\x8d\x76\x17\x5b\xbf\xd6\xa2\xe6\x71\x54\x5f\x08\xf6\x2e\xa2\x37\xcb\x43\xc6\xe8\xcf\xde\xc1\x1b\x06\x26\x5d\xd7\x42\x72\xdb\x27\x70\x5d\x81\x61\x07\xf2\xa2\xef\x1d\x13\xcf\x8a\xe1\x18\x92\x03\x0e\x2d\x8d\x34\x89\x41\x2d\x51\x17\x72\xbe\x70\x39\xb6\x0b\x9a\x89\x02\xc3\x1a\x24\xc5\x6e\x82\x9a\xd6\xe9\x4a\xeb\xbc\xde\x3a\x3d\x0e\x3f\x9c\x44\xc7\xf5\xf0\x63\x6d\x88\x02\x33\x18\x35\x3e\x47\xb5\xa5\x54\x16\xcc\xaa\xbb\x60\x06\xbd\x43\x4b\x89\x4b\xf6\x0c\x6b\x9c\x4b\xf9\x9d\xc1\x45\xd5\xa0\x46\xbb\x8b\xe1\xd6\x72\xab\x79\xd2\xcb\x92\x30\xe7\x53\x09\xb6\x85\xb4\xf4\xe1\xe6\x5a\x06\xf1\x3a\xc3\x63\xe2\x45\xdf\x9b\xc1\xfe\xea\x7f\x86\xba\x79\x4e\x09\xe4\xe7\xa9\x0d\x3c\xaf\xcb\x3e\xcb\xdc\xc8\x52\xda\x21\xdc\x53\x3e\xbb\xfe\x7b\xcc\x77\x35\x15\x58\xea\x7c\x07\x7e\xca\x36\xf8\x0f\xdd\xbb\x24\x28\xdf\xd5\x23\x2c\xdd\x7e\xb7\x13\x1f\x1e\x46\xf5\x85\xcb\xf3\xb5\x76\x73\x3b\x6e\x7c\x9d\xbe\x3c\x5f\x0b\x5f\xd7\x82\x95\x4f\x29\x2e\xa7\x9e\x06\x07\xe4\xc0\x0c\x03\xa5\xb0\x03\xb7\x42\x04\x4b\xd5\xa0\x71\xd6\x47\x79\xf1\x3c\x7b\xb7\x74\x40\x67\x6b\xcc\x58\xee\x21\x1a\x4b\x77\x1a\x03\x9b\xe2\x02\xcd\x38\x43\x1e\xcd\x6b\x23\x7c\x16\x1e\x9d\xb6\xce\xaa\x4f\xc7\x67\x13\x87\xfd\x35\x87\x5d\xa9\xab\xbb\x75\xdd\xae\xb1\xf8\x60\xa9\xfd\x65\xf3\x11\x94\x66\x80\xef\xaf\x37\xaa\xc7\x86\x35\x50\x41\x6d\x3d\x3a\x38\xba\x83\xc8\xae\xc1\x6e\x5e\x2c\xc6\x83\xec\x5f\xab\x6f\x59\x5d\xbf\x8f\x89\xae\x33\x75\xdd\x39\x39\x46\x9c\x1a\x4f\xe0\xbc\xc0\x52\x53\xe2\x42\xa1\xfb\x7d\x8a\xa1\x83\xbd\x8b\x70\x6b\x39\xda\x5d\x34\x57\xd4\x7f\xff\xf4\x98\xa8\x3d\x4b\xed\x7f\x02\x00\x00\xff\xff\xf5\x6b\x21\x45\xa6\x0f\x00\x00")

func mpYamlBytes() ([]byte, error) {
	return bindataRead(
		_mpYaml,
		"mp.yaml",
	)
}

func mpYaml() (*asset, error) {
	bytes, err := mpYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mp.yaml", size: 4006, mode: os.FileMode(436), modTime: time.Unix(1495988273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"corp.yaml": corpYaml,
	"mp.yaml": mpYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"corp.yaml": &bintree{corpYaml, map[string]*bintree{}},
	"mp.yaml": &bintree{mpYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

